esphome:
  name: epaper-display

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:

ota:
  platform: esphome

button:
  - platform: shutdown
    name: "Weatherman - Shutdown"
  - platform: restart
    name: "Weatherman - Restart"
  - platform: template
    name: "Weatherman - Refresh Screen"
    entity_category: config
    on_press:
      - script.execute: update_screen

globals:
  - id: data_updated
    type: bool
    restore_value: no
    initial_value: 'false'
  - id: initial_data_received
    type: bool
    restore_value: no
    initial_value: 'false'
  - id: recorded_display_refresh
    type: int
    restore_value: yes
    initial_value: '0'

script:
  - id: update_screen
    then:
      - lambda: 'id(data_updated) = false;'
      - component.update: eink_display
      - lambda: 'id(recorded_display_refresh) += 1;'

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  use_address: 192.168.254.124

  ap:
    ssid: "Epaper-Display Fallback Hotspot"
    password: "fallback_password"

captive_portal:

font:
  - file: 'fonts/Roboto-Medium.ttf'
    id: roboto_med_30
    size: 30
  - file: 'fonts/Roboto-Regular.ttf'
    id: footer_font
    size: 15
    glyphs: ['&', '@', '!', ',', '.', '"', '%', '(', ')', '+', '-', '_', ':', '°', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', ' ', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z','å', 'ä', 'ö', '/','º','µ','³']
  - file: 'fonts/Roboto-Regular.ttf'
    id: main_sensor_unit
    size: 20
    glyphs: ['&', '@', '!', ',', '.', '"', '%', '(', ')', '+', '-', '_', ':', '°', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', ' ', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z','å', 'ä', 'ö', '/','º','µ','³']
  - file: 'fonts/Roboto-Medium.ttf'
    id: sub_sensor_font
    size: 30
    glyphs: ['&', '@', '!', ',', '.', '"', '%', '(', ')', '+', '-', '_', ':', '°', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', ' ', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z','å', 'ä', 'ö', '/','º','µ','³']
  - file: 'fonts/Roboto-Bold.ttf'
    id: main_sensor_font
    size: 72
  - file: 'fonts/materialdesignicons-webfont.ttf'
    id: mdi_small
    size: 31
    glyphs: ['󰤫', '󰤟', '󰤢', '󰤥', '󰤨', '󰔏', '󰖎', '󰃞', '󰹦', '󱒁']
      
  - file: 'fonts/materialdesignicons-webfont.ttf'
    id: mdi_med
    size: 33
    glyphs: ['󰤫', '󰤟', '󰤢', '󰤥', '󰤨', '󰀦']
  - file: 'fonts/materialdesignicons-webfont.ttf'
    id: weather_large
    size: 60
    glyphs: ['󰖔', '󰖐', '󰖑', '󰖒', '󰖓', '󰙾', '󰖕', '󰖖', '󰖗', '󰖘', '󰙿', '󰖙', '󰖝', '󰖞', '󰋖']
  - file: 'fonts/materialdesignicons-webfont.ttf'
    id: weather_med
    size: 33
    glyphs: ['󰖔', '󰖐', '󰖑', '󰖒', '󰖓', '󰙾', '󰖕', '󰖖', '󰖗', '󰖘', '󰙿', '󰖙', '󰖝', '󰖞', '󰋖']

time:
  - platform: homeassistant
    id: homeassistant_time

sensor:
  - platform: homeassistant
    entity_id: sensor.ag_pro_co2
    id: air_quality
  - platform: homeassistant
    entity_id: sensor.ag_pro_temperature
    id: temp_indoor
  - platform: homeassistant
    entity_id: sensor.ag_pro_humidity
    id: humid_indoor
  - platform: homeassistant
    entity_id: sensor.ag_open_air_o_1ppt_humidity_average
    id: humid_outdoor
  - platform: homeassistant
    entity_id: sensor.ag_open_air_o_1ppt_temperature_average
    id: temp_outdoor
  - platform: homeassistant
    entity_id: sensor.ag_open_air_o_1ppt_pm_2_5_aqi
    id: outdoor_air_quality
  - platform: wifi_signal
    name: "WiFi Signal Sensor"
    id: wifisignal
    update_interval: 60s

text_sensor:
  - platform: homeassistant
    entity_id: sensor.day_1_forecast_condition
    id: day_1_forecast_condition
    name: "Day 1 Forecast Condition"
  - platform: homeassistant
    entity_id: sensor.day_2_forecast_condition
    id: day_2_forecast_condition
    name: "Day 2 Forecast Condition"
  - platform: homeassistant
    entity_id: sensor.day_3_forecast_condition
    id: day_3_forecast_condition
    name: "Day 3 Forecast Condition"
  - platform: homeassistant
    entity_id: sensor.day_4_forecast_condition
    id: day_4_forecast_condition
    name: "Day 4 Forecast Condition"
  - platform: homeassistant
    entity_id: sensor.day_5_forecast_condition
    id: day_5_forecast_condition
    name: "Day 5 Forecast Condition"
  - platform: homeassistant
    entity_id: input_text.weather_forecast_day_1_temperature
    id: day_1_forecast_temperature
    name: "Day 1 Forecast Temperature"
  - platform: homeassistant
    entity_id: input_text.weather_forecast_day_2_temperature
    id: day_2_forecast_temperature
    name: "Day 2 Forecast Temperature"
  - platform: homeassistant
    entity_id: input_text.weather_forecast_day_3_temperature
    id: day_3_forecast_temperature
    name: "Day 3 Forecast Temperature"
  - platform: homeassistant
    entity_id: input_text.weather_forecast_day_4_temperature
    id: day_4_forecast_temperature
    name: "Day 4 Forecast Temperature"
  - platform: homeassistant
    entity_id: input_text.weather_forecast_day_5_temperature
    id: day_5_forecast_temperature
    name: "Day 5 Forecast Temperature"

color:
  - id: color_bg
    red: 0%
    green: 0%
    blue: 0%
    white: 0%
  - id: color_text
    red: 0%
    green: 0%
    blue: 0%
    white: 100%

spi:
  clk_pin: GPIO13
  mosi_pin: GPIO14

display:
  - platform: waveshare_epaper
    id: eink_display
    cs_pin: GPIO15
    dc_pin: GPIO27
    busy_pin: GPIO25
    reset_pin: GPIO26
    reset_duration: 2ms
    model: 7.50inV2alt
    update_interval: 30min
    rotation: 90
    #800 tall 480 wide
    lambda: |-
      it.fill(color_bg);
      int offsetX = 60;
      int offsetY = 50;
      int air_quality_danger_thresh = 800;
      int quality_air = int(id(air_quality).state);
      float indoor_temp = id(temp_indoor).state;
      int indoor_humid = int(id(humid_indoor).state);
      int outdoor_humid = int(id(humid_outdoor).state);
      float outdoor_temp = id(temp_outdoor).state;
      int air_quality_index = int(id(outdoor_air_quality).state);

      // Forecast
      offsetY = 60;
      it.print(10, offsetY - 30, id(main_sensor_unit), "5 Day Forecast");
      it.print(215, offsetY + 68, id(main_sensor_unit), "Today");
      it.filled_rectangle(150, offsetY - 19 , 275, 3);

      std::string condition = id(day_1_forecast_condition).state;
      std::string temp = id(day_1_forecast_temperature).state;
      if (condition == "clear-night") {
        it.print(240, offsetY + 35, id(weather_large), TextAlign::BASELINE_CENTER, "󰖔"); 
      } else if (condition == "cloudy") {
        it.print(240, offsetY + 35, id(weather_large), TextAlign::BASELINE_CENTER, "󰖐"); 
      } else if (condition == "fog") {
        it.print(240, offsetY + 35, id(weather_large), TextAlign::BASELINE_CENTER, "󰖑"); 
      } else if (condition == "hail") {
        it.print(240, offsetY + 35, id(weather_large), TextAlign::BASELINE_CENTER, "󰖒"); 
      } else if (condition == "lightning") {
        it.print(240, offsetY + 35, id(weather_large), TextAlign::BASELINE_CENTER, "󰖓"); 
      } else if (condition == "lightning-rainy") {
        it.print(240, offsetY + 35, id(weather_large), TextAlign::BASELINE_CENTER, "󰙾"); 
      } else if (condition == "partlycloudy") {
        it.print(240, offsetY + 35, id(weather_large), TextAlign::BASELINE_CENTER, "󰖕"); 
      } else if (condition == "pouring") {
        it.print(240, offsetY + 35, id(weather_large), TextAlign::BASELINE_CENTER, "󰖖"); 
      } else if (condition == "rainy") {
        it.print(240, offsetY + 35, id(weather_large), TextAlign::BASELINE_CENTER, "󰖗"); 
      } else if (condition == "snowy") {
        it.print(240, offsetY + 35, id(weather_large), TextAlign::BASELINE_CENTER, "󰖘"); 
      } else if (condition == "snowy-rainy") {
        it.print(240, offsetY + 35, id(weather_large), TextAlign::BASELINE_CENTER, "󰙿"); 
      } else if (condition == "sunny") {
        it.print(240, offsetY + 35, id(weather_large), TextAlign::BASELINE_CENTER, "󰖙"); 
      } else if (condition == "windy") {
        it.print(240, offsetY + 35, id(weather_large), TextAlign::BASELINE_CENTER, "󰖝"); 
      } else if (condition == "windy-variant") {
        it.print(240, offsetY + 35, id(weather_large), TextAlign::BASELINE_CENTER, "󰖞"); 
      } else if (condition == "exceptional") {
        it.print(240, offsetY + 30, id(weather_large), TextAlign::BASELINE_CENTER, "󰋖"); 
      } else {
        it.print(240, offsetY + 35, id(weather_large), TextAlign::BASELINE_CENTER, "󰋖"); 
      }
      it.printf(240, offsetY + 65, id(sub_sensor_font), TextAlign::BASELINE_CENTER, "%s", temp.c_str());

      // day2
      offsetY = 170;
      it.print(offsetX - 59, offsetY + 53, id(main_sensor_unit), "Tomorrow");


      std::string condition2 = id(day_2_forecast_condition).state;
      std::string temp2 = id(day_2_forecast_temperature).state;
      if (condition2 == "clear-night") {
        it.print(offsetX, offsetY + 20, id(weather_med), TextAlign::BASELINE_CENTER, "󰖔"); 
      } else if (condition2 == "cloudy") {
        it.print(offsetX, offsetY + 20, id(weather_med), TextAlign::BASELINE_CENTER, "󰖐"); 
      } else if (condition2 == "fog") {
        it.print(offsetX, offsetY + 20, id(weather_med), TextAlign::BASELINE_CENTER, "󰖑"); 
      } else if (condition2 == "hail") {
        it.print(offsetX, offsetY + 20, id(weather_med), TextAlign::BASELINE_CENTER, "󰖒"); 
      } else if (condition2 == "lightning") {
        it.print(offsetX, offsetY + 20, id(weather_med), TextAlign::BASELINE_CENTER, "󰖓"); 
      } else if (condition2 == "lightning-rainy") {
        it.print(offsetX, offsetY + 20, id(weather_med), TextAlign::BASELINE_CENTER, "󰙾"); 
      } else if (condition2 == "partlycloudy") {
        it.print(offsetX, offsetY + 20, id(weather_med), TextAlign::BASELINE_CENTER, "󰖕"); 
      } else if (condition2 == "pouring") {
        it.print(offsetX, offsetY + 20, id(weather_med), TextAlign::BASELINE_CENTER, "󰖖"); 
      } else if (condition2 == "rainy") {
        it.print(offsetX, offsetY + 20, id(weather_med), TextAlign::BASELINE_CENTER, "󰖗"); 
      } else if (condition2 == "snowy") {
        it.print(offsetX, offsetY + 20, id(weather_med), TextAlign::BASELINE_CENTER, "󰖘"); 
      } else if (condition2 == "snowy-rainy") {
        it.print(offsetX, offsetY + 20, id(weather_med), TextAlign::BASELINE_CENTER, "󰙿"); 
      } else if (condition2 == "sunny") {
        it.print(offsetX, offsetY + 20, id(weather_med), TextAlign::BASELINE_CENTER, "󰖙"); 
      } else if (condition2 == "windy") {
        it.print(offsetX, offsetY + 20, id(weather_med), TextAlign::BASELINE_CENTER, "󰖝"); 
      } else if (condition2 == "windy-variant") {
        it.print(offsetX, offsetY + 20, id(weather_med), TextAlign::BASELINE_CENTER, "󰖞"); 
      } else if (condition2 == "exceptional") {
        it.print(offsetX, offsetY + 20, id(weather_med), TextAlign::BASELINE_CENTER, "󰋖"); 
      } else {
        it.print(offsetX, offsetY + 20, id(weather_med), TextAlign::BASELINE_CENTER, "󰋖"); 
      }
      it.printf(offsetX, offsetY + 50, id(sub_sensor_font), TextAlign::BASELINE_CENTER, "%s", temp2.c_str());
    
      // day3
      //offsetY = 150;
      offsetX = 80;
      it.print(offsetX + 30, offsetY + 53, id(main_sensor_unit), "Day 3");


      std::string condition3 = id(day_3_forecast_condition).state;
      std::string temp3 = id(day_3_forecast_temperature).state;
      if (condition3 == "clear-night") {
        it.print(offsetX + 60, offsetY + 20, id(weather_med), TextAlign::BASELINE_CENTER, "󰖔"); 
      } else if (condition3 == "cloudy") {
        it.print(offsetX + 60, offsetY + 20, id(weather_med), TextAlign::BASELINE_CENTER, "󰖐"); 
      } else if (condition3 == "fog") {
        it.print(offsetX + 60, offsetY + 20, id(weather_med), TextAlign::BASELINE_CENTER, "󰖑"); 
      } else if (condition3 == "hail") {
        it.print(offsetX + 60, offsetY + 20, id(weather_med), TextAlign::BASELINE_CENTER, "󰖒"); 
      } else if (condition3 == "lightning") {
        it.print(offsetX + 60, offsetY + 20, id(weather_med), TextAlign::BASELINE_CENTER, "󰖓"); 
      } else if (condition3 == "lightning-rainy") {
        it.print(offsetX + 60, offsetY + 20, id(weather_med), TextAlign::BASELINE_CENTER, "󰙾"); 
      } else if (condition3 == "partlycloudy") {
        it.print(offsetX + 60, offsetY + 20, id(weather_med), TextAlign::BASELINE_CENTER, "󰖕"); 
      } else if (condition3 == "pouring") {
        it.print(offsetX + 60, offsetY + 20, id(weather_med), TextAlign::BASELINE_CENTER, "󰖖"); 
      } else if (condition3 == "rainy") {
        it.print(offsetX + 60, offsetY + 20, id(weather_med), TextAlign::BASELINE_CENTER, "󰖗"); 
      } else if (condition3 == "snowy") {
        it.print(offsetX + 60, offsetY + 20, id(weather_med), TextAlign::BASELINE_CENTER, "󰖘"); 
      } else if (condition3 == "snowy-rainy") {
        it.print(offsetX + 60, offsetY + 20, id(weather_med), TextAlign::BASELINE_CENTER, "󰙿"); 
      } else if (condition3 == "sunny") {
        it.print(offsetX + 60, offsetY + 20, id(weather_med), TextAlign::BASELINE_CENTER, "󰖙"); 
      } else if (condition3 == "windy") {
        it.print(offsetX + 60, offsetY + 20, id(weather_med), TextAlign::BASELINE_CENTER, "󰖝"); 
      } else if (condition3 == "windy-variant") {
        it.print(offsetX + 60, offsetY + 20, id(weather_med), TextAlign::BASELINE_CENTER, "󰖞"); 
      } else if (condition3 == "exceptional") {
        it.print(offsetX + 240, offsetY + 20, id(weather_med), TextAlign::BASELINE_CENTER, "󰋖"); 
      } else {
        it.print(offsetX + 60, offsetY + 20, id(weather_med), TextAlign::BASELINE_CENTER, "󰋖"); 
      }
      it.printf(offsetX + 60, offsetY + 50, id(sub_sensor_font), TextAlign::BASELINE_CENTER, "%s", temp3.c_str());
      

      // day4
      //offsetY = 150;
      offsetX = 150;
      it.print(offsetX + 30, offsetY + 53, id(main_sensor_unit), "Day 4");


      std::string condition4 = id(day_4_forecast_condition).state;
      std::string temp4 = id(day_4_forecast_temperature).state;
      if (condition4 == "clear-night") {
        it.print(offsetX + 60, offsetY + 20, id(weather_med), TextAlign::BASELINE_CENTER, "󰖔"); 
      } else if (condition4 == "cloudy") {
        it.print(offsetX + 60, offsetY + 20, id(weather_med), TextAlign::BASELINE_CENTER, "󰖐"); 
      } else if (condition4 == "fog") {
        it.print(offsetX + 60, offsetY + 20, id(weather_med), TextAlign::BASELINE_CENTER, "󰖑"); 
      } else if (condition4 == "hail") {
        it.print(offsetX + 60, offsetY + 20, id(weather_med), TextAlign::BASELINE_CENTER, "󰖒"); 
      } else if (condition4 == "lightning") {
        it.print(offsetX + 60, offsetY + 20, id(weather_med), TextAlign::BASELINE_CENTER, "󰖓"); 
      } else if (condition4 == "lightning-rainy") {
        it.print(offsetX + 60, offsetY + 20, id(weather_med), TextAlign::BASELINE_CENTER, "󰙾"); 
      } else if (condition4 == "partlycloudy") {
        it.print(offsetX + 60, offsetY + 20, id(weather_med), TextAlign::BASELINE_CENTER, "󰖕"); 
      } else if (condition4 == "pouring") {
        it.print(offsetX + 60, offsetY + 20, id(weather_med), TextAlign::BASELINE_CENTER, "󰖖"); 
      } else if (condition4 == "rainy") {
        it.print(offsetX + 60, offsetY + 20, id(weather_med), TextAlign::BASELINE_CENTER, "󰖗"); 
      } else if (condition4 == "snowy") {
        it.print(offsetX + 60, offsetY + 20, id(weather_med), TextAlign::BASELINE_CENTER, "󰖘"); 
      } else if (condition4 == "snowy-rainy") {
        it.print(offsetX + 60, offsetY + 20, id(weather_med), TextAlign::BASELINE_CENTER, "󰙿"); 
      } else if (condition4 == "sunny") {
        it.print(offsetX + 60, offsetY + 20, id(weather_med), TextAlign::BASELINE_CENTER, "󰖙"); 
      } else if (condition4 == "windy") {
        it.print(offsetX + 60, offsetY + 20, id(weather_med), TextAlign::BASELINE_CENTER, "󰖝"); 
      } else if (condition4 == "windy-variant") {
        it.print(offsetX + 60, offsetY + 20, id(weather_med), TextAlign::BASELINE_CENTER, "󰖞"); 
      } else if (condition4 == "exceptional") {
        it.print(offsetX + 240, offsetY + 20, id(weather_med), TextAlign::BASELINE_CENTER, "󰋖"); 
      } else {
        it.print(offsetX + 60, offsetY + 20, id(weather_med), TextAlign::BASELINE_CENTER, "󰋖"); 
      }
      it.printf(offsetX + 60, offsetY + 50, id(sub_sensor_font), TextAlign::BASELINE_CENTER, "%s", temp4.c_str());
      
      // day5
      //offsetY = 150;
      offsetX = 220;
      it.print(offsetX + 30, offsetY + 53, id(main_sensor_unit), "Day 5");


      std::string condition5 = id(day_5_forecast_condition).state;
      std::string temp5 = id(day_5_forecast_temperature).state;
      if (condition5 == "clear-night") {
        it.print(offsetX + 60, offsetY + 20, id(weather_med), TextAlign::BASELINE_CENTER, "󰖔"); 
      } else if (condition5 == "cloudy") {
        it.print(offsetX + 60, offsetY + 20, id(weather_med), TextAlign::BASELINE_CENTER, "󰖐"); 
      } else if (condition5 == "fog") {
        it.print(offsetX + 60, offsetY + 20, id(weather_med), TextAlign::BASELINE_CENTER, "󰖑"); 
      } else if (condition5 == "hail") {
        it.print(offsetX + 60, offsetY + 20, id(weather_med), TextAlign::BASELINE_CENTER, "󰖒"); 
      } else if (condition5 == "lightning") {
        it.print(offsetX + 60, offsetY + 20, id(weather_med), TextAlign::BASELINE_CENTER, "󰖓"); 
      } else if (condition5 == "lightning-rainy") {
        it.print(offsetX + 60, offsetY + 20, id(weather_med), TextAlign::BASELINE_CENTER, "󰙾"); 
      } else if (condition5 == "partlycloudy") {
        it.print(offsetX + 60, offsetY + 20, id(weather_med), TextAlign::BASELINE_CENTER, "󰖕"); 
      } else if (condition5 == "pouring") {
        it.print(offsetX + 60, offsetY + 20, id(weather_med), TextAlign::BASELINE_CENTER, "󰖖"); 
      } else if (condition5 == "rainy") {
        it.print(offsetX + 60, offsetY + 20, id(weather_med), TextAlign::BASELINE_CENTER, "󰖗"); 
      } else if (condition5 == "snowy") {
        it.print(offsetX + 60, offsetY + 20, id(weather_med), TextAlign::BASELINE_CENTER, "󰖘"); 
      } else if (condition5 == "snowy-rainy") {
        it.print(offsetX + 60, offsetY + 20, id(weather_med), TextAlign::BASELINE_CENTER, "󰙿"); 
      } else if (condition5 == "sunny") {
        it.print(offsetX + 60, offsetY + 20, id(weather_med), TextAlign::BASELINE_CENTER, "󰖙"); 
      } else if (condition5 == "windy") {
        it.print(offsetX + 60, offsetY + 20, id(weather_med), TextAlign::BASELINE_CENTER, "󰖝"); 
      } else if (condition5 == "windy-variant") {
        it.print(offsetX + 60, offsetY + 20, id(weather_med), TextAlign::BASELINE_CENTER, "󰖞"); 
      } else if (condition5 == "exceptional") {
        it.print(offsetX + 240, offsetY + 20, id(weather_med), TextAlign::BASELINE_CENTER, "󰋖"); 
      } else {
        it.print(offsetX + 60, offsetY + 20, id(weather_med), TextAlign::BASELINE_CENTER, "󰋖"); 
      }
      it.printf(offsetX + 60, offsetY + 50, id(sub_sensor_font), TextAlign::BASELINE_CENTER, "%s", temp5.c_str());
      
      
      // OFFICE 
      offsetY = 300;
      it.print(10, offsetY, id(main_sensor_unit), "Living Room");
      it.filled_rectangle(130, offsetY + 11, 285, 3);
      it.print(25, offsetY + 93, id(main_sensor_unit), TextAlign::BASELINE_LEFT, "Co2");
      it.print(375, offsetY + 54,  id(mdi_small), TextAlign::BASELINE_CENTER, "󰔏"); //thermometer
      it.print(375, offsetY + 94, id(mdi_small), TextAlign::BASELINE_CENTER, "󰖎"); //water-percent

      if(indoor_temp > -100 && indoor_temp < 100){
        it.printf(357, offsetY + 54, id(sub_sensor_font), TextAlign::BASELINE_RIGHT , "%2.1fºF", indoor_temp);
      } else {
        it.print(357, offsetY + 54, id(sub_sensor_font), TextAlign::BASELINE_RIGHT , " - ºF");
      }

      if(indoor_humid >= 0 && indoor_humid <= 100){
        it.printf(357, offsetY + 94, id(sub_sensor_font), TextAlign::BASELINE_RIGHT , "%3d%%", indoor_humid);
      } else {
        it.print(357, offsetY + 94, id(sub_sensor_font), TextAlign::BASELINE_RIGHT , " -  %");
      }

      if(quality_air < 6000 && quality_air >= 0){
        if (quality_air > 100){
          it.printf(230, offsetY + 94, id(main_sensor_font), TextAlign::BASELINE_RIGHT , "%3d", quality_air);
          it.print(230, offsetY + 94, id(main_sensor_unit), TextAlign::BASELINE_LEFT, "ppm");
        } else {
          it.printf(230, offsetY + 94, id(main_sensor_font), TextAlign::BASELINE_RIGHT , "%2d", quality_air);
          it.print(230, offsetY + 94, id(main_sensor_unit), TextAlign::BASELINE_LEFT, "ppm");
        }

        if(quality_air >= air_quality_danger_thresh){
          it.print(37, offsetY + 66, id(mdi_med), TextAlign::BASELINE_CENTER, "󰀦"); //warning
        }
      }

      // OUTSIDE 
      offsetY = 500;
      it.print(10, offsetY, id(main_sensor_unit), "Outside");
      it.filled_rectangle(110, offsetY + 11, 325, 3);
      it.print(25, offsetY + 93, id(main_sensor_unit), TextAlign::BASELINE_LEFT, "AQI");
      it.print(375, offsetY + 54,  id(mdi_small), TextAlign::BASELINE_CENTER, "󰔏"); //thermometer
      it.print(375, offsetY + 94, id(mdi_small), TextAlign::BASELINE_CENTER, "󰖎"); //water-percent

      if(outdoor_temp > 32 && outdoor_temp < 120){
        it.printf(357, offsetY + 54, id(sub_sensor_font), TextAlign::BASELINE_RIGHT , "%2.1fºF", outdoor_temp);
      } else {
        it.print(357, offsetY + 54, id(sub_sensor_font), TextAlign::BASELINE_RIGHT , " - ºF");
      }

      if(outdoor_humid >= 0 && outdoor_humid <= 100){
        it.printf(357, offsetY + 94, id(sub_sensor_font), TextAlign::BASELINE_RIGHT , "%3d%%", outdoor_humid);
      } else {
        it.print(357, offsetY + 94, id(sub_sensor_font), TextAlign::BASELINE_RIGHT , " -  %");
      }

      if(air_quality_index < 6000 && air_quality_index >= 0){
        if (air_quality_index > 100){
          it.printf(230, offsetY + 94, id(main_sensor_font), TextAlign::BASELINE_RIGHT , "%3d", air_quality_index);
          it.print(230, offsetY + 94, id(main_sensor_unit), TextAlign::BASELINE_LEFT, "AQI");
        } else {
          it.printf(230, offsetY + 94, id(main_sensor_font), TextAlign::BASELINE_RIGHT , "%2d", air_quality_index);
          it.print(230, offsetY + 94, id(main_sensor_unit), TextAlign::BASELINE_LEFT, "AQI");
        }

        if(air_quality_index >= air_quality_danger_thresh){
          it.print(37, offsetY + 66, id(mdi_med), TextAlign::BASELINE_CENTER, "󰀦"); //warning
        }
      }
      

      /* FOOTER */
      it.strftime(470, 780, id(footer_font), TextAlign::BASELINE_RIGHT , "Updated at %d/%b/%Y %H:%M", id(homeassistant_time).now());
